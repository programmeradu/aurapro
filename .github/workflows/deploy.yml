# AURA Command Center - Deployment Pipeline
name: Deploy

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      version:
        description: 'Version to deploy'
        required: false
        default: 'latest'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Determine deployment environment
  setup:
    name: Setup Deployment
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.env.outputs.environment }}
      version: ${{ steps.env.outputs.version }}
      should_deploy: ${{ steps.env.outputs.should_deploy }}
    steps:
      - name: Determine environment
        id: env
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
            echo "should_deploy=true" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "environment=staging" >> $GITHUB_OUTPUT
            echo "version=latest" >> $GITHUB_OUTPUT
            echo "should_deploy=true" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            echo "environment=production" >> $GITHUB_OUTPUT
            echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
            echo "should_deploy=true" >> $GITHUB_OUTPUT
          else
            echo "should_deploy=false" >> $GITHUB_OUTPUT
          fi

  # Build and push Docker image
  build:
    name: Build and Push
    runs-on: ubuntu-latest
    needs: setup
    if: needs.setup.outputs.should_deploy == 'true'
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=tag
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ needs.setup.outputs.version }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.production
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Deploy to staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [setup, build]
    if: needs.setup.outputs.environment == 'staging'
    environment:
      name: staging
      url: https://staging.aura-transport.gov.gh
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.STAGING_SSH_KEY }}

      - name: Deploy to staging server
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.STAGING_USER }}@${{ secrets.STAGING_HOST }} << 'EOF'
            cd /opt/aura
            git pull origin main
            docker-compose -f docker-compose.staging.yml pull
            docker-compose -f docker-compose.staging.yml up -d
            docker system prune -f
          EOF

      - name: Run health check
        run: |
          sleep 30
          curl -f https://staging.aura-transport.gov.gh/api/health

      - name: Run smoke tests
        run: |
          npm ci
          npm run test:smoke -- --baseURL=https://staging.aura-transport.gov.gh

  # Deploy to production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [setup, build]
    if: needs.setup.outputs.environment == 'production'
    environment:
      name: production
      url: https://aura-transport.gov.gh
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.PRODUCTION_SSH_KEY }}

      - name: Create backup
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }} << 'EOF'
            cd /opt/aura
            ./scripts/backup.sh
          EOF

      - name: Deploy to production server
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }} << 'EOF'
            cd /opt/aura
            git pull origin main
            ./scripts/deploy.sh production ${{ needs.setup.outputs.version }}
          EOF

      - name: Run health check
        run: |
          sleep 60
          curl -f https://aura-transport.gov.gh/api/health

      - name: Run production smoke tests
        run: |
          npm ci
          npm run test:smoke -- --baseURL=https://aura-transport.gov.gh

      - name: Update monitoring
        run: |
          # Update monitoring dashboards with new version
          curl -X POST "${{ secrets.GRAFANA_WEBHOOK }}" \
            -H "Content-Type: application/json" \
            -d '{"version": "${{ needs.setup.outputs.version }}", "environment": "production"}'

  # Database migrations
  migrate:
    name: Run Migrations
    runs-on: ubuntu-latest
    needs: [setup, deploy-staging, deploy-production]
    if: always() && (needs.deploy-staging.result == 'success' || needs.deploy-production.result == 'success')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ needs.setup.outputs.environment == 'production' && secrets.PRODUCTION_SSH_KEY || secrets.STAGING_SSH_KEY }}

      - name: Run database migrations
        run: |
          HOST=${{ needs.setup.outputs.environment == 'production' && secrets.PRODUCTION_HOST || secrets.STAGING_HOST }}
          USER=${{ needs.setup.outputs.environment == 'production' && secrets.PRODUCTION_USER || secrets.STAGING_USER }}
          
          ssh -o StrictHostKeyChecking=no $USER@$HOST << 'EOF'
            cd /opt/aura
            docker exec aura-app npm run migrate
          EOF

  # Post-deployment tests
  post-deployment:
    name: Post-Deployment Tests
    runs-on: ubuntu-latest
    needs: [setup, deploy-staging, deploy-production, migrate]
    if: always() && (needs.deploy-staging.result == 'success' || needs.deploy-production.result == 'success')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run integration tests
        run: |
          BASE_URL=${{ needs.setup.outputs.environment == 'production' && 'https://aura-transport.gov.gh' || 'https://staging.aura-transport.gov.gh' }}
          npm run test:integration -- --baseURL=$BASE_URL

      - name: Run performance tests
        run: |
          BASE_URL=${{ needs.setup.outputs.environment == 'production' && 'https://aura-transport.gov.gh' || 'https://staging.aura-transport.gov.gh' }}
          npm run test:performance -- --baseURL=$BASE_URL

  # Rollback capability
  rollback:
    name: Rollback
    runs-on: ubuntu-latest
    needs: [setup, post-deployment]
    if: failure() && needs.setup.outputs.environment == 'production'
    environment:
      name: production-rollback
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.PRODUCTION_SSH_KEY }}

      - name: Rollback deployment
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }} << 'EOF'
            cd /opt/aura
            ./scripts/rollback.sh
          EOF

      - name: Verify rollback
        run: |
          sleep 30
          curl -f https://aura-transport.gov.gh/api/health

  # Notifications
  notify:
    name: Notify
    runs-on: ubuntu-latest
    needs: [setup, deploy-staging, deploy-production, post-deployment, rollback]
    if: always() && needs.setup.outputs.should_deploy == 'true'
    steps:
      - name: Determine status
        id: status
        run: |
          if [[ "${{ needs.deploy-staging.result }}" == "success" || "${{ needs.deploy-production.result }}" == "success" ]]; then
            if [[ "${{ needs.post-deployment.result }}" == "success" ]]; then
              echo "status=success" >> $GITHUB_OUTPUT
              echo "message=‚úÖ Deployment to ${{ needs.setup.outputs.environment }} successful" >> $GITHUB_OUTPUT
            else
              echo "status=warning" >> $GITHUB_OUTPUT
              echo "message=‚ö†Ô∏è Deployment to ${{ needs.setup.outputs.environment }} completed but post-deployment tests failed" >> $GITHUB_OUTPUT
            fi
          elif [[ "${{ needs.rollback.result }}" == "success" ]]; then
            echo "status=warning" >> $GITHUB_OUTPUT
            echo "message=üîÑ Deployment to ${{ needs.setup.outputs.environment }} failed and was rolled back" >> $GITHUB_OUTPUT
          else
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "message=‚ùå Deployment to ${{ needs.setup.outputs.environment }} failed" >> $GITHUB_OUTPUT
          fi

      - name: Notify Slack
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              "text": "${{ steps.status.outputs.message }}",
              "attachments": [
                {
                  "color": "${{ steps.status.outputs.status == 'success' && 'good' || steps.status.outputs.status == 'warning' && 'warning' || 'danger' }}",
                  "fields": [
                    {
                      "title": "Environment",
                      "value": "${{ needs.setup.outputs.environment }}",
                      "short": true
                    },
                    {
                      "title": "Version",
                      "value": "${{ needs.setup.outputs.version }}",
                      "short": true
                    },
                    {
                      "title": "Commit",
                      "value": "${{ github.sha }}",
                      "short": true
                    },
                    {
                      "title": "Actor",
                      "value": "${{ github.actor }}",
                      "short": true
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Create GitHub Release
        if: needs.setup.outputs.environment == 'production' && steps.status.outputs.status == 'success'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.setup.outputs.version }}
          release_name: AURA v${{ needs.setup.outputs.version }}
          body: |
            ## AURA Command Center Release ${{ needs.setup.outputs.version }}
            
            **Deployment Date:** $(date)
            **Environment:** Production
            **Commit:** ${{ github.sha }}
            
            ### Changes
            - Automated deployment via GitHub Actions
            - All tests passed successfully
            - Health checks verified
            
            ### Deployment Status
            ‚úÖ Application deployed successfully
            ‚úÖ Database migrations completed
            ‚úÖ Post-deployment tests passed
            ‚úÖ Health checks verified
          draft: false
          prerelease: false
