"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["common"],{

/***/ "(app-pages-browser)/./src/lib/memoryLeakFixes.ts":
/*!************************************!*\
  !*** ./src/lib/memoryLeakFixes.ts ***!
  \************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MemoryLeakDetector: () => (/* binding */ MemoryLeakDetector),\n/* harmony export */   VehicleDataManager: () => (/* binding */ VehicleDataManager),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   initializeMemoryLeakPrevention: () => (/* binding */ initializeMemoryLeakPrevention),\n/* harmony export */   useMemoryLeakPrevention: () => (/* binding */ useMemoryLeakPrevention)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/**\n * 🧠 Memory Leak Prevention and Fixes\n * Comprehensive memory management for AURA Command Center\n */ \n// Memory leak detection and prevention utilities\nclass MemoryLeakDetector {\n    static getInstance() {\n        if (!MemoryLeakDetector.instance) {\n            MemoryLeakDetector.instance = new MemoryLeakDetector();\n        }\n        return MemoryLeakDetector.instance;\n    }\n    // Track intervals to prevent leaks\n    trackInterval(interval) {\n        this.intervals.add(interval);\n        return interval;\n    }\n    // Track timeouts to prevent leaks\n    trackTimeout(timeout) {\n        this.timeouts.add(timeout);\n        return timeout;\n    }\n    // Track event listeners\n    trackEventListener(target, event, listener) {\n        if (!this.eventListeners.has(target)) {\n            this.eventListeners.set(target, new Map());\n        }\n        this.eventListeners.get(target).set(event, listener);\n    }\n    // Track observers\n    trackObserver(observer) {\n        this.observers.add(observer);\n    }\n    // Track abort controllers\n    trackAbortController(controller) {\n        this.abortControllers.add(controller);\n        return controller;\n    }\n    // Clear specific interval\n    clearInterval(interval) {\n        clearInterval(interval);\n        this.intervals.delete(interval);\n    }\n    // Clear specific timeout\n    clearTimeout(timeout) {\n        clearTimeout(timeout);\n        this.timeouts.delete(timeout);\n    }\n    // Remove event listener\n    removeEventListener(target, event) {\n        const listeners = this.eventListeners.get(target);\n        if (listeners) {\n            const listener = listeners.get(event);\n            if (listener) {\n                target.removeEventListener(event, listener);\n                listeners.delete(event);\n                if (listeners.size === 0) {\n                    this.eventListeners.delete(target);\n                }\n            }\n        }\n    }\n    // Disconnect observer\n    disconnectObserver(observer) {\n        observer.disconnect();\n        this.observers.delete(observer);\n    }\n    // Abort controller\n    abortController(controller) {\n        controller.abort();\n        this.abortControllers.delete(controller);\n    }\n    // Clean up all tracked resources\n    cleanupAll() {\n        console.log('🧹 Cleaning up all tracked resources...');\n        // Clear all intervals\n        this.intervals.forEach((interval)=>clearInterval(interval));\n        this.intervals.clear();\n        // Clear all timeouts\n        this.timeouts.forEach((timeout)=>clearTimeout(timeout));\n        this.timeouts.clear();\n        // Remove all event listeners\n        this.eventListeners.forEach((listeners, target)=>{\n            listeners.forEach((listener, event)=>{\n                target.removeEventListener(event, listener);\n            });\n        });\n        this.eventListeners.clear();\n        // Disconnect all observers\n        this.observers.forEach((observer)=>observer.disconnect());\n        this.observers.clear();\n        // Abort all controllers\n        this.abortControllers.forEach((controller)=>controller.abort());\n        this.abortControllers.clear();\n        // Stop memory monitoring\n        if (this.memoryMonitorInterval) {\n            clearInterval(this.memoryMonitorInterval);\n            this.memoryMonitorInterval = null;\n        }\n        console.log('✅ All resources cleaned up');\n    }\n    // Monitor memory usage\n    startMemoryMonitoring() {\n        if (this.memoryMonitorInterval) return;\n        this.memoryMonitorInterval = setInterval(()=>{\n            if ( true && 'performance' in window && 'memory' in window.performance) {\n                const memory = window.performance.memory;\n                const memoryUsage = {\n                    used: Math.round(memory.usedJSHeapSize / 1024 / 1024),\n                    total: Math.round(memory.totalJSHeapSize / 1024 / 1024),\n                    limit: Math.round(memory.jsHeapSizeLimit / 1024 / 1024)\n                };\n                // Log warning if memory usage is high\n                if (memoryUsage.used > memoryUsage.limit * 0.8) {\n                    console.warn('⚠️ High memory usage detected:', memoryUsage);\n                    console.log('📊 Tracked resources:', {\n                        intervals: this.intervals.size,\n                        timeouts: this.timeouts.size,\n                        eventListeners: this.eventListeners.size,\n                        observers: this.observers.size,\n                        abortControllers: this.abortControllers.size\n                    });\n                }\n            }\n        }, 30000) // Check every 30 seconds\n        ;\n    }\n    // Get memory usage statistics\n    getMemoryStats() {\n        if ( true && 'performance' in window && 'memory' in window.performance) {\n            const memory = window.performance.memory;\n            return {\n                used: Math.round(memory.usedJSHeapSize / 1024 / 1024),\n                total: Math.round(memory.totalJSHeapSize / 1024 / 1024),\n                limit: Math.round(memory.jsHeapSizeLimit / 1024 / 1024),\n                trackedResources: {\n                    intervals: this.intervals.size,\n                    timeouts: this.timeouts.size,\n                    eventListeners: this.eventListeners.size,\n                    observers: this.observers.size,\n                    abortControllers: this.abortControllers.size\n                }\n            };\n        }\n        return null;\n    }\n    constructor(){\n        this.intervals = new Set();\n        this.timeouts = new Set();\n        this.eventListeners = new Map();\n        this.observers = new Set();\n        this.abortControllers = new Set();\n        this.memoryMonitorInterval = null;\n    }\n}\n// React hooks for memory leak prevention\nconst useMemoryLeakPrevention = ()=>{\n    const detector = MemoryLeakDetector.getInstance();\n    const cleanupFunctions = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)([]);\n    const addCleanup = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"useMemoryLeakPrevention.useCallback[addCleanup]\": (cleanup)=>{\n            cleanupFunctions.current.push(cleanup);\n        }\n    }[\"useMemoryLeakPrevention.useCallback[addCleanup]\"], []);\n    const safeSetInterval = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"useMemoryLeakPrevention.useCallback[safeSetInterval]\": (callback, delay)=>{\n            const interval = setInterval(callback, delay);\n            detector.trackInterval(interval);\n            addCleanup({\n                \"useMemoryLeakPrevention.useCallback[safeSetInterval]\": ()=>detector.clearInterval(interval)\n            }[\"useMemoryLeakPrevention.useCallback[safeSetInterval]\"]);\n            return interval;\n        }\n    }[\"useMemoryLeakPrevention.useCallback[safeSetInterval]\"], [\n        detector,\n        addCleanup\n    ]);\n    const safeSetTimeout = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"useMemoryLeakPrevention.useCallback[safeSetTimeout]\": (callback, delay)=>{\n            const timeout = setTimeout(callback, delay);\n            detector.trackTimeout(timeout);\n            addCleanup({\n                \"useMemoryLeakPrevention.useCallback[safeSetTimeout]\": ()=>detector.clearTimeout(timeout)\n            }[\"useMemoryLeakPrevention.useCallback[safeSetTimeout]\"]);\n            return timeout;\n        }\n    }[\"useMemoryLeakPrevention.useCallback[safeSetTimeout]\"], [\n        detector,\n        addCleanup\n    ]);\n    const safeAddEventListener = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"useMemoryLeakPrevention.useCallback[safeAddEventListener]\": (target, event, listener, options)=>{\n            target.addEventListener(event, listener, options);\n            detector.trackEventListener(target, event, listener);\n            addCleanup({\n                \"useMemoryLeakPrevention.useCallback[safeAddEventListener]\": ()=>detector.removeEventListener(target, event)\n            }[\"useMemoryLeakPrevention.useCallback[safeAddEventListener]\"]);\n        }\n    }[\"useMemoryLeakPrevention.useCallback[safeAddEventListener]\"], [\n        detector,\n        addCleanup\n    ]);\n    const safeCreateObserver = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"useMemoryLeakPrevention.useCallback[safeCreateObserver]\": (observer)=>{\n            detector.trackObserver(observer);\n            addCleanup({\n                \"useMemoryLeakPrevention.useCallback[safeCreateObserver]\": ()=>detector.disconnectObserver(observer)\n            }[\"useMemoryLeakPrevention.useCallback[safeCreateObserver]\"]);\n            return observer;\n        }\n    }[\"useMemoryLeakPrevention.useCallback[safeCreateObserver]\"], [\n        detector,\n        addCleanup\n    ]);\n    const safeCreateAbortController = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"useMemoryLeakPrevention.useCallback[safeCreateAbortController]\": ()=>{\n            const controller = new AbortController();\n            detector.trackAbortController(controller);\n            addCleanup({\n                \"useMemoryLeakPrevention.useCallback[safeCreateAbortController]\": ()=>detector.abortController(controller)\n            }[\"useMemoryLeakPrevention.useCallback[safeCreateAbortController]\"]);\n            return controller;\n        }\n    }[\"useMemoryLeakPrevention.useCallback[safeCreateAbortController]\"], [\n        detector,\n        addCleanup\n    ]);\n    // Cleanup on unmount\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)({\n        \"useMemoryLeakPrevention.useEffect\": ()=>{\n            return ({\n                \"useMemoryLeakPrevention.useEffect\": ()=>{\n                    cleanupFunctions.current.forEach({\n                        \"useMemoryLeakPrevention.useEffect\": (cleanup)=>{\n                            try {\n                                cleanup();\n                            } catch (error) {\n                                console.warn('Error during cleanup:', error);\n                            }\n                        }\n                    }[\"useMemoryLeakPrevention.useEffect\"]);\n                    cleanupFunctions.current = [];\n                }\n            })[\"useMemoryLeakPrevention.useEffect\"];\n        }\n    }[\"useMemoryLeakPrevention.useEffect\"], []);\n    return {\n        safeSetInterval,\n        safeSetTimeout,\n        safeAddEventListener,\n        safeCreateObserver,\n        safeCreateAbortController,\n        addCleanup\n    };\n};\n// Vehicle data accumulation fix\nclass VehicleDataManager {\n    static getInstance() {\n        if (!VehicleDataManager.instance) {\n            VehicleDataManager.instance = new VehicleDataManager();\n        }\n        return VehicleDataManager.instance;\n    }\n    addVehicle(id, data) {\n        // Add timestamp for cleanup\n        this.vehicleData.set(id, {\n            ...data,\n            lastUpdate: Date.now()\n        });\n        // Prevent unlimited growth\n        if (this.vehicleData.size > this.maxVehicles) {\n            this.cleanupOldVehicles();\n        }\n    }\n    getVehicle(id) {\n        return this.vehicleData.get(id);\n    }\n    getAllVehicles() {\n        return Array.from(this.vehicleData.values());\n    }\n    removeVehicle(id) {\n        this.vehicleData.delete(id);\n    }\n    cleanupOldVehicles() {\n        const now = Date.now();\n        const maxAge = 5 * 60 * 1000 // 5 minutes\n        ;\n        for (const [id, data] of this.vehicleData.entries()){\n            if (now - data.lastUpdate > maxAge) {\n                this.vehicleData.delete(id);\n            }\n        }\n        console.log(\"\\uD83E\\uDDF9 Cleaned up old vehicles. Current count: \".concat(this.vehicleData.size));\n    }\n    startCleanup() {\n        if (this.cleanupInterval) return;\n        this.cleanupInterval = setInterval(()=>{\n            this.cleanupOldVehicles();\n        }, 60000) // Cleanup every minute\n        ;\n    }\n    destroy() {\n        if (this.cleanupInterval) {\n            clearInterval(this.cleanupInterval);\n            this.cleanupInterval = null;\n        }\n        this.vehicleData.clear();\n    }\n    constructor(){\n        this.vehicleData = new Map();\n        this.maxVehicles = 1000;\n        this.cleanupInterval = null;\n        this.startCleanup();\n    }\n}\n// Initialize memory leak prevention\nconst initializeMemoryLeakPrevention = ()=>{\n    const detector = MemoryLeakDetector.getInstance();\n    // Start memory monitoring\n    detector.startMemoryMonitoring();\n    // Clean up on page unload\n    if (true) {\n        window.addEventListener('beforeunload', ()=>{\n            detector.cleanupAll();\n            VehicleDataManager.getInstance().destroy();\n        });\n        // Clean up on visibility change (tab switch)\n        document.addEventListener('visibilitychange', ()=>{\n            if (document.hidden) {\n                // Perform cleanup when tab becomes hidden\n                detector.cleanupAll();\n            }\n        });\n    }\n    console.log('🧠 Memory leak prevention initialized');\n};\n// Export utilities\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n    MemoryLeakDetector,\n    VehicleDataManager,\n    useMemoryLeakPrevention,\n    initializeMemoryLeakPrevention\n});\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/memoryLeakFixes.ts\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/services/websocket.ts":
/*!***********************************!*\
  !*** ./src/services/websocket.ts ***!
  \***********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useWebSocket: () => (/* binding */ useWebSocket),\n/* harmony export */   websocketService: () => (/* binding */ websocketService)\n/* harmony export */ });\n/* harmony import */ var _lib_memoryLeakFixes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/lib/memoryLeakFixes */ \"(app-pages-browser)/./src/lib/memoryLeakFixes.ts\");\n/* harmony import */ var _store_useStore__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/store/useStore */ \"(app-pages-browser)/./src/store/useStore.ts\");\n/* harmony import */ var socket_io_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! socket.io-client */ \"(app-pages-browser)/./node_modules/socket.io-client/build/esm/index.js\");\n\n\n\nclass WebSocketService {\n    // Auto-detect WebSocket URL based on current environment\n    getWebSocketUrl() {\n        // Check if we're in development or production\n        const isDev =  true || 0;\n        if (isDev) {\n            // In development, always use localhost:8002\n            return 'http://localhost:8002';\n        } else {\n            // In production, use the same host but port 8002\n            const protocol = window.location.protocol === 'https:' ? 'https:' : 'http:';\n            const hostname = window.location.hostname;\n            return \"\".concat(protocol, \"//\").concat(hostname, \":8002\");\n        }\n    }\n    connect(url) {\n        try {\n            // Auto-detect WebSocket URL based on current environment\n            const defaultUrl = this.getWebSocketUrl();\n            const targetUrl = url || defaultUrl;\n            this.connectionUrl = targetUrl;\n            this.isManualDisconnect = false;\n            console.log('🔌 Attempting WebSocket connection to:', targetUrl);\n            console.log('🌐 Current frontend URL:', window.location.href);\n            console.log('🔍 Auto-detected WebSocket URL:', defaultUrl);\n            // Clear any existing reconnect timeout\n            if (this.reconnectTimeout) {\n                clearTimeout(this.reconnectTimeout);\n                this.reconnectTimeout = null;\n            }\n            this.connectionStatus = 'connecting';\n            // Disconnect existing connection if any\n            if (this.socket) {\n                console.log('🔄 Disconnecting existing socket...');\n                this.socket.disconnect();\n                this.socket = null;\n            }\n            this.socket = (0,socket_io_client__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(targetUrl, {\n                transports: [\n                    'polling',\n                    'websocket'\n                ],\n                timeout: 20000,\n                forceNew: true,\n                autoConnect: true,\n                reconnection: true,\n                reconnectionAttempts: 5,\n                reconnectionDelay: 3000,\n                reconnectionDelayMax: 15000,\n                randomizationFactor: 0.3,\n                upgrade: true,\n                rememberUpgrade: false,\n                // Additional options for better compatibility\n                withCredentials: false,\n                extraHeaders: {\n                    'Access-Control-Allow-Origin': '*'\n                }\n            });\n            this.setupEventListeners();\n            _store_useStore__WEBPACK_IMPORTED_MODULE_1__.useStore.getState().setConnectionStatus('connecting');\n            console.log('🔄 WebSocket status set to connecting');\n            // Connection will happen automatically due to autoConnect: true\n            console.log('🚀 WebSocket connection will establish automatically');\n        } catch (error) {\n            console.error('❌ WebSocket connection initialization error:', error);\n            _store_useStore__WEBPACK_IMPORTED_MODULE_1__.useStore.getState().setConnectionStatus('disconnected');\n        }\n    }\n    setupEventListeners() {\n        if (!this.socket) return;\n        // Connection events\n        this.socket.on('connect', ()=>{\n            var _this_socket, _this_socket1;\n            console.log('✅ WebSocket connected successfully!');\n            console.log('✅ Socket ID:', (_this_socket = this.socket) === null || _this_socket === void 0 ? void 0 : _this_socket.id);\n            console.log('✅ Transport:', (_this_socket1 = this.socket) === null || _this_socket1 === void 0 ? void 0 : _this_socket1.io.engine.transport.name);\n            this.connectionStatus = 'connected';\n            this.reconnectAttempts = 0 // Reset reconnect attempts on successful connection\n            ;\n            _store_useStore__WEBPACK_IMPORTED_MODULE_1__.useStore.getState().setConnectionStatus('connected');\n            _store_useStore__WEBPACK_IMPORTED_MODULE_1__.useStore.getState().updateLastUpdate();\n            // Start heartbeat to maintain connection\n            this.startHeartbeat();\n        });\n        this.socket.on('disconnect', (reason)=>{\n            console.log('❌ WebSocket disconnected:', reason);\n            this.connectionStatus = 'disconnected';\n            _store_useStore__WEBPACK_IMPORTED_MODULE_1__.useStore.getState().setConnectionStatus('disconnected');\n            // Clear heartbeat\n            if (this.heartbeatInterval) {\n                clearInterval(this.heartbeatInterval);\n                this.heartbeatInterval = null;\n            }\n            // Only try to reconnect for specific reasons, not all disconnects\n            if (reason === 'io server disconnect' || reason === 'transport close' || reason === 'transport error') {\n                console.log('🔄 Server initiated disconnect, scheduling reconnect');\n                this.scheduleReconnect();\n            } else {\n                console.log('🔄 Client initiated disconnect, no reconnect needed');\n            }\n        });\n        this.socket.on('connect_error', (error)=>{\n            var _this_socket, _this_socket1, _this_socket_io_engine_transport, _this_socket_io_engine, _this_socket_io, _this_socket2;\n            console.error('❌ WebSocket connection error:', error);\n            console.error('❌ Error details:', {\n                message: error.message,\n                type: error.constructor.name,\n                stack: error.stack\n            });\n            console.error('❌ Socket state:', {\n                connected: (_this_socket = this.socket) === null || _this_socket === void 0 ? void 0 : _this_socket.connected,\n                disconnected: (_this_socket1 = this.socket) === null || _this_socket1 === void 0 ? void 0 : _this_socket1.disconnected,\n                transport: ((_this_socket2 = this.socket) === null || _this_socket2 === void 0 ? void 0 : (_this_socket_io = _this_socket2.io) === null || _this_socket_io === void 0 ? void 0 : (_this_socket_io_engine = _this_socket_io.engine) === null || _this_socket_io_engine === void 0 ? void 0 : (_this_socket_io_engine_transport = _this_socket_io_engine.transport) === null || _this_socket_io_engine_transport === void 0 ? void 0 : _this_socket_io_engine_transport.name) || 'unknown'\n            });\n            this.connectionStatus = 'error';\n            _store_useStore__WEBPACK_IMPORTED_MODULE_1__.useStore.getState().setConnectionStatus('error');\n            // Schedule reconnect on connection error\n            this.scheduleReconnect();\n        });\n        // Data events\n        this.socket.on('vehicles_update', (vehicles)=>{\n            _store_useStore__WEBPACK_IMPORTED_MODULE_1__.useStore.getState().setVehicles(vehicles);\n            _store_useStore__WEBPACK_IMPORTED_MODULE_1__.useStore.getState().updateLastUpdate();\n        });\n        this.socket.on('vehicle_update', (param)=>{\n            let { id, updates } = param;\n            _store_useStore__WEBPACK_IMPORTED_MODULE_1__.useStore.getState().updateVehicle(id, updates);\n            _store_useStore__WEBPACK_IMPORTED_MODULE_1__.useStore.getState().updateLastUpdate();\n        });\n        this.socket.on('routes_update', (routes)=>{\n            _store_useStore__WEBPACK_IMPORTED_MODULE_1__.useStore.getState().setRoutes(routes);\n            _store_useStore__WEBPACK_IMPORTED_MODULE_1__.useStore.getState().updateLastUpdate();\n        });\n        this.socket.on('route_update', (param)=>{\n            let { id, updates } = param;\n            _store_useStore__WEBPACK_IMPORTED_MODULE_1__.useStore.getState().updateRoute(id, updates);\n            _store_useStore__WEBPACK_IMPORTED_MODULE_1__.useStore.getState().updateLastUpdate();\n        });\n        this.socket.on('kpis_update', (kpis)=>{\n            _store_useStore__WEBPACK_IMPORTED_MODULE_1__.useStore.getState().setKPIs(kpis);\n            _store_useStore__WEBPACK_IMPORTED_MODULE_1__.useStore.getState().updateLastUpdate();\n        });\n        this.socket.on('trips_update', (trips)=>{\n            console.log('🚗 Received trips update:', (trips === null || trips === void 0 ? void 0 : trips.length) || 0, 'trips');\n            _store_useStore__WEBPACK_IMPORTED_MODULE_1__.useStore.getState().setTrips(trips);\n            _store_useStore__WEBPACK_IMPORTED_MODULE_1__.useStore.getState().updateLastUpdate();\n        });\n        this.socket.on('kpi_update', (param)=>{\n            let { id, updates } = param;\n            if (typeof updates.value === 'string') {\n                updates.value = parseFloat(updates.value);\n            }\n            _store_useStore__WEBPACK_IMPORTED_MODULE_1__.useStore.getState().updateKPI(id, updates);\n            _store_useStore__WEBPACK_IMPORTED_MODULE_1__.useStore.getState().updateLastUpdate();\n        });\n        this.socket.on('alert', (alert)=>{\n            _store_useStore__WEBPACK_IMPORTED_MODULE_1__.useStore.getState().addAlert(alert);\n            // Show browser notification if enabled\n            if (_store_useStore__WEBPACK_IMPORTED_MODULE_1__.useStore.getState().notifications && 'Notification' in window) {\n                if (Notification.permission === 'granted') {\n                    new Notification(alert.title, {\n                        body: alert.message,\n                        icon: '/favicon.svg',\n                        tag: alert.type\n                    });\n                }\n            }\n        });\n        this.socket.on('scenarios_update', (scenarios)=>{\n            _store_useStore__WEBPACK_IMPORTED_MODULE_1__.useStore.getState().setScenarios(scenarios);\n            _store_useStore__WEBPACK_IMPORTED_MODULE_1__.useStore.getState().updateLastUpdate();\n        });\n        // Ghana-specific events\n        this.socket.on('ghana_weather_update', (weather)=>{\n            // Handle weather updates that might affect transport\n            if (weather.is_rainy && weather.rain_intensity === 'high') {\n                _store_useStore__WEBPACK_IMPORTED_MODULE_1__.useStore.getState().addAlert({\n                    type: 'warning',\n                    title: 'Heavy Rain Alert',\n                    message: 'Heavy rainfall detected in Accra. Expect traffic delays and potential flooding.',\n                    read: false\n                });\n            }\n        });\n        this.socket.on('ghana_holiday_alert', (holiday)=>{\n            _store_useStore__WEBPACK_IMPORTED_MODULE_1__.useStore.getState().addAlert({\n                type: 'info',\n                title: 'Ghana Public Holiday',\n                message: \"Today is \".concat(holiday.name, \". Expect reduced transport services.\"),\n                read: false\n            });\n        });\n        this.socket.on('crisis_scenario', (scenario)=>{\n            _store_useStore__WEBPACK_IMPORTED_MODULE_1__.useStore.getState().addAlert({\n                type: 'error',\n                title: 'Crisis Alert',\n                message: \"\".concat(scenario.name, \": \").concat(scenario.description),\n                read: false\n            });\n        });\n        // ML/AI events (Phase 3)\n        this.socket.on('ml_prediction', (prediction)=>{\n            const mlPrediction = {\n                ...prediction,\n                timestamp: new Date(prediction.timestamp)\n            };\n            _store_useStore__WEBPACK_IMPORTED_MODULE_1__.useStore.getState().addMLPrediction(mlPrediction);\n            _store_useStore__WEBPACK_IMPORTED_MODULE_1__.useStore.getState().updateLastUpdate();\n        });\n        this.socket.on('anomaly_detected', (anomaly)=>{\n            const anomalyEvent = {\n                ...anomaly,\n                detected_at: new Date(anomaly.detected_at)\n            };\n            _store_useStore__WEBPACK_IMPORTED_MODULE_1__.useStore.getState().addAnomaly(anomalyEvent);\n            // Create alert for high severity anomalies\n            if (anomaly.severity === 'high' || anomaly.severity === 'critical') {\n                _store_useStore__WEBPACK_IMPORTED_MODULE_1__.useStore.getState().addAlert({\n                    type: anomaly.severity === 'critical' ? 'error' : 'warning',\n                    title: \"Anomaly Detected: \".concat(anomaly.title),\n                    message: anomaly.description,\n                    read: false\n                });\n            }\n            _store_useStore__WEBPACK_IMPORTED_MODULE_1__.useStore.getState().updateLastUpdate();\n        });\n        this.socket.on('ai_insights', (insights)=>{\n            // Add individual insights\n            if (insights.insights) {\n                Object.values(insights.insights).flat().forEach((insight)=>{\n                    const aiInsight = {\n                        ...insight,\n                        timestamp: new Date(insight.timestamp || Date.now())\n                    };\n                    _store_useStore__WEBPACK_IMPORTED_MODULE_1__.useStore.getState().addAIInsight(aiInsight);\n                });\n            }\n            _store_useStore__WEBPACK_IMPORTED_MODULE_1__.useStore.getState().updateLastUpdate();\n        });\n        this.socket.on('scenario_analysis', (analysis)=>{\n            const scenarioAnalysis = {\n                ...analysis,\n                timestamp: new Date()\n            };\n            _store_useStore__WEBPACK_IMPORTED_MODULE_1__.useStore.getState().addScenarioAnalysis(scenarioAnalysis);\n            _store_useStore__WEBPACK_IMPORTED_MODULE_1__.useStore.getState().updateLastUpdate();\n        });\n        this.socket.on('cultural_insights', (insights)=>{\n            _store_useStore__WEBPACK_IMPORTED_MODULE_1__.useStore.getState().setCulturalInsights(insights);\n            _store_useStore__WEBPACK_IMPORTED_MODULE_1__.useStore.getState().updateLastUpdate();\n        });\n        this.socket.on('economic_analysis', (analysis)=>{\n            _store_useStore__WEBPACK_IMPORTED_MODULE_1__.useStore.getState().setEconomicAnalysis(analysis);\n            _store_useStore__WEBPACK_IMPORTED_MODULE_1__.useStore.getState().updateLastUpdate();\n        });\n    }\n    // Removed handleReconnect - Socket.IO handles reconnection automatically\n    // Emit events to server\n    emit(event, data) {\n        var _this_socket;\n        if ((_this_socket = this.socket) === null || _this_socket === void 0 ? void 0 : _this_socket.connected) {\n            this.socket.emit(event, data);\n        } else {\n            console.warn('WebSocket not connected, cannot emit event:', event);\n        }\n    }\n    // Scenario control\n    activateScenario(scenarioId, parameters) {\n        this.emit('activate_scenario', {\n            scenarioId,\n            parameters\n        });\n    }\n    deactivateScenario(scenarioId) {\n        this.emit('deactivate_scenario', {\n            scenarioId\n        });\n    }\n    // Request data updates\n    requestVehicleUpdate() {\n        this.emit('request_vehicles');\n    }\n    requestRouteUpdate() {\n        this.emit('request_routes');\n    }\n    requestKPIUpdate() {\n        this.emit('request_kpis');\n    }\n    // Send user preferences\n    updateUserPreferences(preferences) {\n        this.emit('user_preferences', preferences);\n    }\n    disconnect() {\n        this.isManualDisconnect = true;\n        this.connectionStatus = 'disconnected';\n        console.log('🧹 WebSocket: Starting comprehensive cleanup...');\n        // Clear all timers with memory leak prevention\n        if (this.reconnectTimeout) {\n            this.memoryDetector.clearTimeout(this.reconnectTimeout);\n            this.reconnectTimeout = null;\n        }\n        if (this.heartbeatInterval) {\n            this.memoryDetector.clearInterval(this.heartbeatInterval);\n            this.heartbeatInterval = null;\n        }\n        if (this.socket) {\n            console.log('🔌 Disconnecting WebSocket...');\n            // Remove all event listeners to prevent memory leaks\n            this.socket.removeAllListeners();\n            // Disconnect the socket\n            this.socket.disconnect();\n            this.socket = null;\n            _store_useStore__WEBPACK_IMPORTED_MODULE_1__.useStore.getState().setConnectionStatus('disconnected');\n            console.log('✅ WebSocket cleanup completed');\n        }\n    }\n    scheduleReconnect() {\n        if (this.isManualDisconnect || this.reconnectAttempts >= this.maxReconnectAttempts) {\n            console.log('🚫 Not scheduling reconnect - manual disconnect or max attempts reached');\n            return;\n        }\n        this.reconnectAttempts++;\n        const delay = Math.min(this.reconnectDelay * Math.pow(2, this.reconnectAttempts - 1), 30000) // Max 30 seconds\n        ;\n        console.log(\"\\uD83D\\uDD04 Scheduling reconnect attempt \".concat(this.reconnectAttempts, \"/\").concat(this.maxReconnectAttempts, \" in \").concat(delay, \"ms\"));\n        this.reconnectTimeout = setTimeout(()=>{\n            if (!this.isManualDisconnect) {\n                console.log(\"\\uD83D\\uDD04 Reconnect attempt \".concat(this.reconnectAttempts, \"/\").concat(this.maxReconnectAttempts));\n                this.connect(this.connectionUrl);\n            }\n        }, delay);\n    }\n    startHeartbeat() {\n        if (this.heartbeatInterval) {\n            clearInterval(this.heartbeatInterval);\n        }\n        this.heartbeatInterval = setInterval(()=>{\n            if (this.socket && this.socket.connected) {\n                this.socket.emit('ping');\n            }\n        }, 30000) // Ping every 30 seconds\n        ;\n    }\n    isConnected() {\n        var _this_socket;\n        return ((_this_socket = this.socket) === null || _this_socket === void 0 ? void 0 : _this_socket.connected) || false;\n    }\n    getConnectionStatus() {\n        if (!this.socket) return 'disconnected';\n        if (this.socket.connected) return 'connected';\n        if (this.socket.connecting) return 'connecting';\n        return 'disconnected';\n    }\n    getSocket() {\n        return this.socket;\n    }\n    constructor(){\n        this.socket = null;\n        this.connectionStatus = 'disconnected';\n        this.reconnectAttempts = 0;\n        this.maxReconnectAttempts = 10 // Increased for better reliability\n        ;\n        this.reconnectDelay = 1000 // Start with 1 second\n        ;\n        this.reconnectTimeout = null;\n        this.heartbeatInterval = null;\n        this.connectionUrl = '';\n        this.memoryDetector = _lib_memoryLeakFixes__WEBPACK_IMPORTED_MODULE_0__.MemoryLeakDetector.getInstance();\n        this.isManualDisconnect = false;\n    }\n}\n// Singleton instance\nconst websocketService = new WebSocketService();\n// Hook for easy access in components\nconst useWebSocket = ()=>{\n    const connected = (0,_store_useStore__WEBPACK_IMPORTED_MODULE_1__.useStore)({\n        \"useWebSocket.useStore[connected]\": (state)=>state.connected\n    }[\"useWebSocket.useStore[connected]\"]);\n    const connectionStatus = (0,_store_useStore__WEBPACK_IMPORTED_MODULE_1__.useStore)({\n        \"useWebSocket.useStore[connectionStatus]\": (state)=>state.connectionStatus\n    }[\"useWebSocket.useStore[connectionStatus]\"]);\n    const lastUpdate = (0,_store_useStore__WEBPACK_IMPORTED_MODULE_1__.useStore)({\n        \"useWebSocket.useStore[lastUpdate]\": (state)=>state.lastUpdate\n    }[\"useWebSocket.useStore[lastUpdate]\"]);\n    return {\n        connected,\n        connectionStatus,\n        lastUpdate,\n        connect: websocketService.connect.bind(websocketService),\n        disconnect: websocketService.disconnect.bind(websocketService),\n        emit: websocketService.emit.bind(websocketService),\n        activateScenario: websocketService.activateScenario.bind(websocketService),\n        deactivateScenario: websocketService.deactivateScenario.bind(websocketService),\n        requestVehicleUpdate: websocketService.requestVehicleUpdate.bind(websocketService),\n        requestRouteUpdate: websocketService.requestRouteUpdate.bind(websocketService),\n        requestKPIUpdate: websocketService.requestKPIUpdate.bind(websocketService)\n    };\n} // Export the service without auto-connecting\n // Components will connect manually when needed\n;\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/services/websocket.ts\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/store/useStore.ts":
/*!*******************************!*\
  !*** ./src/store/useStore.ts ***!
  \*******************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useActiveScenarios: () => (/* binding */ useActiveScenarios),\n/* harmony export */   useKPIsByCategory: () => (/* binding */ useKPIsByCategory),\n/* harmony export */   useRouteVehicles: () => (/* binding */ useRouteVehicles),\n/* harmony export */   useStore: () => (/* binding */ useStore),\n/* harmony export */   useUnreadAlerts: () => (/* binding */ useUnreadAlerts)\n/* harmony export */ });\n/* harmony import */ var zustand__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! zustand */ \"(app-pages-browser)/./node_modules/zustand/esm/index.mjs\");\n/* harmony import */ var zustand_middleware__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! zustand/middleware */ \"(app-pages-browser)/./node_modules/zustand/esm/middleware.mjs\");\n\n\n// Default Accra coordinates\nconst DEFAULT_CENTER = [\n    5.6037,\n    -0.1870\n];\nconst useStore = (0,zustand__WEBPACK_IMPORTED_MODULE_0__.create)()((0,zustand_middleware__WEBPACK_IMPORTED_MODULE_1__.subscribeWithSelector)((set, get)=>({\n        // Initial state\n        vehicles: [],\n        routes: [],\n        trips: [],\n        kpis: [],\n        // Ghana GTFS Data\n        gtfsData: null,\n        gtfsLoaded: false,\n        gtfsError: null,\n        alerts: [],\n        scenarios: [],\n        // ML/AI initial state (Phase 3)\n        mlPredictions: [],\n        anomalies: [],\n        aiInsights: [],\n        scenarioAnalyses: [],\n        culturalInsights: null,\n        economicAnalysis: null,\n        selectedRoute: null,\n        selectedVehicle: null,\n        mapCenter: DEFAULT_CENTER,\n        mapZoom: 12,\n        sidebarOpen: true,\n        activePanel: 'overview',\n        connected: false,\n        connectionStatus: 'disconnected',\n        lastUpdate: null,\n        theme: 'light',\n        notifications: true,\n        autoRefresh: true,\n        refreshInterval: 30000,\n        // Data actions\n        setVehicles: (vehicles)=>set({\n                vehicles\n            }),\n        updateVehicle: (id, updates)=>set((state)=>({\n                    vehicles: state.vehicles.map((vehicle)=>vehicle.id === id ? {\n                            ...vehicle,\n                            ...updates\n                        } : vehicle)\n                })),\n        setRoutes: (routes)=>set({\n                routes\n            }),\n        updateRoute: (id, updates)=>set((state)=>({\n                    routes: state.routes.map((route)=>route.id === id ? {\n                            ...route,\n                            ...updates\n                        } : route)\n                })),\n        setTrips: (trips)=>set({\n                trips\n            }),\n        setKPIs: (kpis)=>set({\n                kpis\n            }),\n        updateKPI: (id, updates)=>set((state)=>({\n                    kpis: state.kpis.map((kpi)=>kpi.id === id ? {\n                            ...kpi,\n                            ...updates\n                        } : kpi)\n                })),\n        addAlert: (alert)=>set((state)=>({\n                    alerts: [\n                        {\n                            ...alert,\n                            id: Math.random().toString(36).substr(2, 9),\n                            timestamp: new Date()\n                        },\n                        ...state.alerts\n                    ]\n                })),\n        markAlertRead: (id)=>set((state)=>({\n                    alerts: state.alerts.map((alert)=>alert.id === id ? {\n                            ...alert,\n                            read: true\n                        } : alert)\n                })),\n        clearAlerts: ()=>set({\n                alerts: []\n            }),\n        setScenarios: (scenarios)=>set({\n                scenarios\n            }),\n        activateScenario: (id)=>set((state)=>({\n                    scenarios: state.scenarios.map((scenario)=>scenario.id === id ? {\n                            ...scenario,\n                            active: true\n                        } : scenario)\n                })),\n        deactivateScenario: (id)=>set((state)=>({\n                    scenarios: state.scenarios.map((scenario)=>scenario.id === id ? {\n                            ...scenario,\n                            active: false\n                        } : scenario)\n                })),\n        // ML/AI actions (Phase 3)\n        addMLPrediction: (prediction)=>set((state)=>({\n                    mlPredictions: [\n                        ...state.mlPredictions.slice(-99),\n                        prediction\n                    ] // Keep last 100\n                })),\n        addAnomaly: (anomaly)=>set((state)=>({\n                    anomalies: [\n                        ...state.anomalies.slice(-49),\n                        anomaly\n                    ] // Keep last 50\n                })),\n        addAIInsight: (insight)=>set((state)=>({\n                    aiInsights: [\n                        ...state.aiInsights.slice(-29),\n                        insight\n                    ] // Keep last 30\n                })),\n        addScenarioAnalysis: (analysis)=>set((state)=>({\n                    scenarioAnalyses: [\n                        ...state.scenarioAnalyses.slice(-19),\n                        analysis\n                    ] // Keep last 20\n                })),\n        setCulturalInsights: (insights)=>set({\n                culturalInsights: insights\n            }),\n        setEconomicAnalysis: (analysis)=>set({\n                economicAnalysis: analysis\n            }),\n        clearOldPredictions: ()=>set((state)=>{\n                const oneHourAgo = new Date(Date.now() - 60 * 60 * 1000);\n                return {\n                    mlPredictions: state.mlPredictions.filter((p)=>p.timestamp > oneHourAgo),\n                    anomalies: state.anomalies.filter((a)=>a.detected_at > oneHourAgo)\n                };\n            }),\n        // UI actions\n        selectRoute: (id)=>set({\n                selectedRoute: id\n            }),\n        selectVehicle: (id)=>set({\n                selectedVehicle: id\n            }),\n        setMapView: (center, zoom)=>set({\n                mapCenter: center,\n                mapZoom: zoom\n            }),\n        toggleSidebar: ()=>set((state)=>({\n                    sidebarOpen: !state.sidebarOpen\n                })),\n        setActivePanel: (panel)=>set({\n                activePanel: panel\n            }),\n        // Connection actions\n        setConnectionStatus: (status)=>set({\n                connectionStatus: status,\n                connected: status === 'connected'\n            }),\n        updateLastUpdate: ()=>set({\n                lastUpdate: new Date()\n            }),\n        // GTFS Data actions\n        setGTFSData: (data)=>set({\n                gtfsData: data,\n                gtfsLoaded: true,\n                gtfsError: null\n            }),\n        setGTFSError: (error)=>set({\n                gtfsError: error,\n                gtfsLoaded: false\n            }),\n        clearGTFSData: ()=>set({\n                gtfsData: null,\n                gtfsLoaded: false,\n                gtfsError: null\n            }),\n        // Preference actions\n        setTheme: (theme)=>set({\n                theme\n            }),\n        toggleNotifications: ()=>set((state)=>({\n                    notifications: !state.notifications\n                })),\n        setAutoRefresh: (enabled)=>set({\n                autoRefresh: enabled\n            }),\n        setRefreshInterval: (interval)=>set({\n                refreshInterval: interval\n            })\n    })));\n// Selectors for computed values\nconst useUnreadAlerts = ()=>useStore({\n        \"useUnreadAlerts.useStore\": (state)=>state.alerts.filter({\n                \"useUnreadAlerts.useStore\": (alert)=>!alert.read\n            }[\"useUnreadAlerts.useStore\"])\n    }[\"useUnreadAlerts.useStore\"]);\nconst useActiveScenarios = ()=>useStore({\n        \"useActiveScenarios.useStore\": (state)=>state.scenarios.filter({\n                \"useActiveScenarios.useStore\": (scenario)=>scenario.active\n            }[\"useActiveScenarios.useStore\"])\n    }[\"useActiveScenarios.useStore\"]);\nconst useRouteVehicles = (routeId)=>useStore({\n        \"useRouteVehicles.useStore\": (state)=>state.vehicles.filter({\n                \"useRouteVehicles.useStore\": (vehicle)=>vehicle.route === routeId\n            }[\"useRouteVehicles.useStore\"])\n    }[\"useRouteVehicles.useStore\"]);\nconst useKPIsByCategory = (category)=>useStore({\n        \"useKPIsByCategory.useStore\": (state)=>state.kpis.filter({\n                \"useKPIsByCategory.useStore\": (kpi)=>kpi.category === category\n            }[\"useKPIsByCategory.useStore\"])\n    }[\"useKPIsByCategory.useStore\"]);\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/store/useStore.ts\n"));

/***/ })

}]);