# AURA Command Center - Production Docker Compose
version: '3.8'

services:
  # Main Application
  aura-app:
    build:
      context: .
      dockerfile: Dockerfile.production
    container_name: aura-app
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
    env_file:
      - .env.production
    depends_on:
      - postgres
      - redis
    networks:
      - aura-network
    volumes:
      - ./logs:/var/log/aura
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.aura.rule=Host(`aura-transport.gov.gh`)"
      - "traefik.http.routers.aura.tls=true"
      - "traefik.http.routers.aura.tls.certresolver=letsencrypt"

  # WebSocket Server
  aura-websocket:
    build:
      context: ./websocket-server
      dockerfile: Dockerfile
    container_name: aura-websocket
    restart: unless-stopped
    ports:
      - "8002:8002"
    environment:
      - NODE_ENV=production
    env_file:
      - .env.production
    depends_on:
      - postgres
      - redis
    networks:
      - aura-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.aura-ws.rule=Host(`ws.aura-transport.gov.gh`)"
      - "traefik.http.routers.aura-ws.tls=true"

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: aura-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: aura_production
      POSTGRES_USER: aura_user
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    networks:
      - aura-network
    ports:
      - "5432:5432"

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: aura-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    networks:
      - aura-network
    ports:
      - "6379:6379"

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: aura-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - aura-app
    networks:
      - aura-network

  # Traefik Load Balancer
  traefik:
    image: traefik:v2.10
    container_name: aura-traefik
    restart: unless-stopped
    command:
      - "--api.dashboard=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.letsencrypt.acme.tlschallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.email=admin@transport.gov.gh"
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - letsencrypt_data:/letsencrypt
    networks:
      - aura-network

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: aura-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - aura-network

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: aura-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - aura-network

  # Log Management - ELK Stack
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: aura-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - aura-network
    ports:
      - "9200:9200"

  logstash:
    image: docker.elastic.co/logstash/logstash:8.8.0
    container_name: aura-logstash
    restart: unless-stopped
    volumes:
      - ./monitoring/logstash/pipeline:/usr/share/logstash/pipeline
      - ./logs:/var/log/aura:ro
    depends_on:
      - elasticsearch
    networks:
      - aura-network

  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    container_name: aura-kibana
    restart: unless-stopped
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      - aura-network

  # Backup Service
  backup:
    image: postgres:15-alpine
    container_name: aura-backup
    restart: "no"
    environment:
      PGPASSWORD: ${DATABASE_PASSWORD}
    volumes:
      - ./backups:/backups
      - ./scripts/backup.sh:/backup.sh
    depends_on:
      - postgres
    networks:
      - aura-network
    entrypoint: ["/backup.sh"]

networks:
  aura-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:
  elasticsearch_data:
  letsencrypt_data:
